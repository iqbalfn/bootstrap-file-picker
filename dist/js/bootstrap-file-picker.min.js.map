{"version":3,"sources":["../../src/js/file-picker.js"],"names":["Default","multiple","type","btnUpload","thumbnails","search","upload","selected","FilePicker","config","this","_config","_getConfig","_el","_files","_items","_paths","_query","_uploader","_timer","_makeDrawer","_addElementsListener","$","drawer","_this","on","e","_footerHide","dhSearchInput","inpWidth","offsetWidth","inpPadRight","parseFloat","css","dhSearchSpinner","style","left","_spinnerHide","focus","_searchQuery","preventDefault","remove","clearTimeout","value","setTimeout","q","drawerBody","item","currentTarget","children","removeClass","path","data","classList","toggle","push","splice","indexOf","_footerUpdate","opacity","dfBtnSelect","click","result","each","i","call","dhUploadInput","files","length","_clearResult","_loop","file","el","_renderItem","prog","find","get","res","_hs","parent","replaceWith","add","nel","dhUploadForm","reset","not","conf","k","text","replace","_this2","header","multiText","upform","tmpl","appendTo","document","body","name","dataset","m","toUpperCase","dhUploadLabel","append","uploader","replacer","removable","selectable","includes","safe","thumb","clss","progress","img","test","reader","FileReader","onload","src","target","readAsDataURL","query","_this3","_spinnerShow","forEach","drawerFooter","display","_footerShow","window"],"mappings":"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","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap File Picker (v0.0.1): file-picker.js\n * --------------------------------------------------------------------------\n */\n\nimport $ from 'jquery'\n\nconst Default = {\n    multiple    : false,\n    type        : '*/*',\n    btnUpload   : 'Upload',\n    thumbnails  : null,\n    search      : null,\n    upload      : null,\n    selected    : null\n}\n\nclass FilePicker {\n\n    constructor(config){\n        this._config    = this._getConfig(config)\n        this._el        = {}\n        \n        this._files     = []\n        this._items     = []\n        this._paths     = []\n\n        this._query     = ''\n        this._uploader  = 0\n        this._timer     = null\n\n        this._makeDrawer()\n        this._addElementsListener()\n\n        $(this._el.drawer).drawer('show');\n    }\n\n    // private\n\n    _addElementsListener(){\n        // drawer showing\n        $(this._el.drawer).on('show.bs.drawer', e => {\n            this._footerHide()\n        })\n        \n        // drawer shown\n        $(this._el.drawer).on('shown.bs.drawer', e => {\n\n            // calculate the spinner position\n            if(this._el.dhSearchInput){\n                let inpWidth    = this._el.dhSearchInput.offsetWidth\n                let inpPadRight = parseFloat( $(this._el.dhSearchInput).css('padding-left') )\n                this._el.dhSearchSpinner.style.left = ( inpWidth - ( inpPadRight * 2.5 ) ) + 'px'\n\n                this._spinnerHide()\n                this._el.dhSearchInput.focus()\n            }\n\n            // find preset files\n            this._searchQuery('')\n        })\n\n        // drawer hiding\n        $(this._el.drawer).on('hide.bs.drawer', e => {\n            if(this._uploader)\n                e.preventDefault()\n        })\n\n        // drawer hidden\n        $(this._el.drawer).on('hidden.bs.drawer', e => {\n            $(this._el.drawer).remove()\n        })\n\n        // input search\n        if(this._el.dhSearchInput){\n            $(this._el.dhSearchInput).on('input', e => {\n                if(this._timer)\n                    clearTimeout(this._timer)\n\n                this._query = this._el.dhSearchInput.value\n                this._timer = setTimeout(q => this._searchQuery(q), 500, this._query)\n            })\n        }\n\n        // file list click\n        $(this._el.drawerBody).on('click', '.filepicker-item-selectable', e => {\n            let item = e.currentTarget\n\n            if(!this._config.multiple){\n                $(this._el.drawerBody)\n                    .children('.filepicker-item-active')\n                    .removeClass('filepicker-item-active')\n            }\n\n            let path = $(item).data('filepicker.item').path\n\n            if(item.classList.toggle('filepicker-item-active')){\n                this._paths.push(path)\n            }else{\n                this._paths.splice(this._paths.indexOf(path), 1)\n            }\n\n            this._footerUpdate()\n        })\n\n        // file list error click\n        $(this._el.drawerBody).on('click', '.filepicker-item-error', e => {\n            let item = e.currentTarget\n            item.style.opacity = 0\n            setTimeout(item => $(item).remove(), 300, item)\n        })\n\n        // clicking the select button\n        $(this._el.dfBtnSelect).click(e => {\n            let result = []\n            $(this._el.drawerBody)\n                .children('.filepicker-item-active')\n                .each((i,e) => result.push( $(e).data('filepicker.item') ))\n\n            if(this._config.selected)\n                this._config.selected.call(this, result)\n\n            $(this._el.drawer).drawer('hide')\n        })\n\n        if(this._el.dhUploadInput){\n            $(this._el.dhUploadInput).on('change', e => {\n                let files = this._el.dhUploadInput.files\n                if(!files.length)\n                    return\n\n                this._clearResult()\n\n                for(let i=0; i<files.length; i++){\n                    let file = files[i]\n                    let el   = this._renderItem(file, true, null, false, false)\n                    let prog = $(el).find('.progress-bar').get(0)\n\n                    // start upload the file\n                    this._uploader++\n                    this._footerUpdate()\n                    this._config.upload.call(this, file, prog, res => {\n                        this._uploader--\n\n                        if(typeof res === 'string'){\n                            res = this._hs(res)\n                            $(prog).parent().replaceWith(`<small class=\"text-danger\">${res}</small>`)\n                            el.classList.add('filepicker-item-error')\n                        }else{\n                            let nel = this._renderItem(res, false, el, false, true)\n\n                            if(nel)\n                                nel.click()\n                            else\n                                $(el).remove()\n                        }\n                        this._footerUpdate()\n                    })\n                }\n                this._el.dhUploadForm.reset()\n            })\n        }\n    }\n\n    _clearResult(){\n        $(this._el.drawerBody)\n            .find('.filepicker-item-clearable')\n            .not('.filepicker-item-active')\n            .each((i,e) => $(e).remove())\n        \n        this._footerUpdate()\n    }\n\n    _getConfig(config){\n        let conf = {}\n        for(let k in Default)\n            conf[k] = typeof config[k] === 'undefined' ? Default[k] : config[k]\n        return conf\n    }\n\n    _hs(text){\n        return text\n          .replace(/&/g, \"&amp;\")\n          .replace(/</g, \"&lt;\")\n          .replace(/>/g, \"&gt;\")\n          .replace(/\"/g, \"&quot;\")\n          .replace(/'/g, \"&#039;\");\n    }\n\n    _makeDrawer(){\n        let header      = ''\n        let multiText   = this._config.multiple ? ' multiple' : ''\n\n        // Searchable\n        if(this._config.search){\n            let upform = ``\n\n            // Uploadable\n            if(this._config.upload){\n                upform = `\n                    <form class=\"input-group-append\" data-el=\"dh-upload-form\">\n                        <label class=\"btn btn-outline-secondary\" data-el=\"dh-upload-label\">\n                            <input type=\"file\" accept=\"${this._config.type}\" data-el=\"dh-upload-input\"${multiText}>\n                        </label>\n                    </form>`\n            }\n\n            header = `\n                <div class=\"form-group\">\n                    <div class=\"input-group\">\n                        <input type=\"search\" class=\"form-control\" placeholder=\"Search\" aria-label=\"Search\" data-el=\"dh-search-input\">\n                        ${upform}\n                    </div>\n                    <div class=\"spinner-border spinner-border-sm text-secondary\" role=\"status\" data-el=\"dh-search-spinner\"></div>\n                </div>`\n\n        // Uploadable only\n        }else if(this._config.upload){\n            header = `\n                <form data-el=\"dh-upload-form\">\n                    <label class=\"btn btn-block btn-outline-primary\" data-el=\"dh-upload-label\">\n                        <input type=\"file\" accept=\"${this._config.type}\" data-el=\"dh-upload-input\"${multiText}>\n                    </label>\n                </form>`\n        }\n\n        let tmpl = `\n            <div class=\"drawer slide drawer-right filepicker-container\">\n                <div class=\"drawer-content drawer-content-scrollable\">\n                    <div class=\"drawer-header\">${header}</div>\n                    <div class=\"drawer-body\" data-el=\"drawer-body\"></div>\n                    <div class=\"drawer-footer\" data-el=\"drawer-footer\">\n                        <button class=\"btn btn-primary btn-block\" data-el=\"df-btn-select\">\n                            Select\n                        </button>\n                    </div>\n                </div>\n            </div>`;\n\n        this._el.drawer = $(tmpl).appendTo(document.body).get(0)\n\n        // find identified elements\n        $(this._el.drawer).find('[data-el]').each((i,e) => {\n            let name = e.dataset.el.replace(/\\-[a-z]/g, m => m[1].toUpperCase())\n            this._el[name] = e\n        })\n\n        // add upload label\n        $(this._el.dhUploadLabel).append(this._config.btnUpload)\n    }\n\n    _renderItem(item, uploader=false, replacer=null, removable=true, selectable=true){\n        if(!uploader){\n            if(this._paths.includes(item.path))\n                return\n        }\n\n        let safe = {\n            name  : this._hs(item.name),\n            type  : this._hs(item.type),\n            thumb : item.thumb || this._config.thumbnails\n        }\n\n        let clss = ' filepicker-item'\n        let progress = ''\n        \n        if(uploader){\n            clss+= ' filepicker-item-uploader'\n            progress = `\n                <div class=\"progress\">\n                    <div class=\"progress-bar progress-bar-striped progress-bar-animated\" style=\"width:0%\"></div>\n                </div>`\n        }\n\n        if(removable)\n            clss+= ' filepicker-item-clearable'\n        \n        if(selectable)\n            clss+= ' filepicker-item-selectable'\n\n        let tmpl = `\n            <div class=\"media${clss}\" title=\"${safe.name}\">\n                <img src=\"${safe.thumb}\" alt=\"#\" width=\"48\" height=\"48\">\n                <div class=\"media-body\">\n                    <h6>${safe.name}</h6>\n                    <small class=\"text-muted\">${safe.type}</small>\n                    ${progress}\n                </div>\n            </div>`\n\n        let el = $(tmpl).get(0)\n\n        if(uploader){\n            let img = $(el).children('img').get(0)\n            if(/image\\//.test(safe.type)){\n                let reader = new FileReader()\n                reader.onload = e => img.src = e.target.result\n                reader.readAsDataURL(item)\n            }\n        }else{\n            $(el).data('filepicker.item', item)\n        }\n\n        if(replacer)\n            $(replacer).replaceWith(el)\n        else\n            $(this._el.drawerBody).append(el)\n\n        return el\n    }\n\n    _searchQuery(query){\n        this._clearResult()\n        this._spinnerShow()\n\n        if(!this._config.search)\n            return\n\n        this._config.search(query, this._config.type, res => {\n            if(query != this._query)\n                return\n            this._spinnerHide()\n            \n            if(!res)\n                return\n\n            res.forEach(item => this._renderItem(item))\n        })\n    }\n\n    // Toogler\n    _footerHide(){\n        this._el.drawerFooter.style.display = 'none'\n    }\n    _footerShow(){\n        this._el.drawerFooter.style.display = 'flex'\n    }\n    _footerUpdate(){\n        if(this._uploader)\n            return this._footerHide()\n\n        if($(this._el.drawerBody).children('.filepicker-item-active').length)\n            this._footerShow()\n        else\n            this._footerHide()\n    }\n\n    _spinnerHide(){\n        if(this._el.dhSearchSpinner)\n            this._el.dhSearchSpinner.style.display = 'none'\n    }\n    _spinnerShow(){\n        if(this._el.dhSearchSpinner)\n            this._el.dhSearchSpinner.style.display = 'block'\n    }\n}\n\nwindow.FilePicker = FilePicker\nexport default FilePicker"]}